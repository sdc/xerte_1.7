	<LO stageColour="0xCCCC99" templateData="_level0.templateData" name="Learning Object">		<SCR isFunc="1" name="lookup"><![CDATA[// Look-up function: ////args[0] : The value we are searching for;//args[1] : The list in which we are searching;//args[2] : A list that matches the above list;//args[3] : The value in the second list that corresponds to the value in the first list.// Loop over the first list ...for (iLookUp = 0; iLookUp < args[1].length; iLookUp++){  if (args[1][iLookUp] == args[0]){    // Current element matches the value sought: save it to arg[3] and leave ...    args[3] = args[2][iLookUp];    theReturnedVariable = args[3];    break;  };};]]></SCR>		<SCR name="createVarsMakeSteps"><![CDATA[// Create all the variables the piece needs ...// Type: RANGE - choose one value in units of STEP ...for (i = 0; i < templateData.problem[0].variables[0].rangeVar.length; i++){  name = templateData.problem[0].variables[0].rangeVar[i].name;  min = Number(templateData.problem[0].variables[0].rangeVar[i].min);  max = Number(templateData.problem[0].variables[0].rangeVar[i].max);  step = Number(templateData.problem[0].variables[0].rangeVar[i].step);  // Adjust for steps  (<> 1) ...   min = min / step; max = max / step;  // Choose a value for NAME within the specified range ...  engine[name] = (Math.floor(Math.random() * (max - min + 1)) + min) * step;};//Testing variables ...//w = 20; i2 = 1000; k3 = 4800; t = 2;// Type: LIST - choose one element ...for (i = 0; i < templateData.problem[0].variables[0].listVar.length; i++) {  name = templateData.problem[0].variables[0].listVar[i].name;  // Split into an array ...  tempArr = templateData.problem[0].variables[0].listVar[i].list.split(',');  // ... and choose one value randomly ...  tempVal = tempArr[Math.floor(Math.random() * tempArr.length)];  engine[name] = tempVal;};// Type: ARRAY (put an array into a Xerte variable) ...for (i = 0; i < templateData.problem[0].variables[0].arrayVar.length; i++){  name = templateData.problem[0].variables[0].arrayVar[i].name;  // Split into an array ...  engine[name] = templateData.problem[0].variables[0].arrayVar[i].list.split(',');};//Type: EXPRESSION (could use the previous two types) ...for (i = 0; i < templateData.problem[0].variables[0].exprVar.length; i++){  name = templateData.problem[0].variables[0].exprVar[i].name;  // The mechanism below means we cannot mix ActionScript functions (e.g. +, -, x, /, Math.sin) and  // local functions (e.g. lookup) ...  evaluateExpression = expression(templateData.problem[0].variables[0].exprVar[i].expr, engine);  if (evaluateExpression == undefined) {    engine[name] = theReturnedVariable;  } else {    engine[name] = evaluateExpression;  };};debug ('QQQ is ' + QQQ); //debug ('zz is ' + zz); // Ideally, we would like to do this: lookup('thomas',team,ages,q);//lookup('thomas',team,ages,theReturnedVariable);//lookup('thomas',team,ages);//q = theReturnedVariable; //debug('Hard-wired evaluation (q) ' + q);// Make the steps for this problemx = icon.nextSibling.firstChild;//x.nextSibling.duplicate(templateData.problem[0].step.length - 1);//debug(x);//debug("spilt........................");//debug(x.nextSibling);icon.nextSibling.firstChild.nextSibling.duplicate(templateData.problem[0].step.length - 1);]]></SCR>		<IFC name="Interface" title="My Learning Object" visuals="0">			<FW_ENT name="interface">				<DIS h="560" w="760" name="panel" x="20" y="20" type="ext" url="templatePath  + 'flex/whitePanel.swf'"><![CDATA[]]></DIS>			</FW_ENT>			<PG name="protoStep" title="Page Title" help="Page Help">				<SCR name="setup"><![CDATA[// Useful variable ...curPage = rootIcon.getPageIndex() - 1;// (Subtract 2 because we want the first icon to be 0 and it is currently 2 - there are// (currently) two icons (lookup and createVarsMakeSteps) ahead of it)attempts = 0;attemptsShowHint = 2; // ... after this number of attempts, show the hintmaxAttempts = templateData.problem[0].step[curPage].attempts;// Work out all correct answers, as there may be more than one - i.e. quadratics etcanswers = new Array();possibleAnswers = new Array();for (i = 0; i < templateData.problem[0].step[curPage].expression.length; i++){  obj = new Object();  obj.answer = expression(templateData.problem[0].step[curPage].expression[i], engine);  obj.answer = Math.round(obj.answer * 100) / 100;  obj.correct = templateData.problem[0].step[curPage].expression[i].correct;  obj.units = templateData.problem[0].step[curPage].expression[i].units;    if (templateData.problem[0].step[curPage].expression[i].proximity != undefined) {    obj.within = templateData.problem[0].step[curPage].expression[i].proximity;  };  obj.feedback = templateData.problem[0].step[curPage].expression[i].feedback;  obj.result = templateData.problem[0].step[curPage].prompt[0].result;  answers.push(obj);  if (obj.correct == "true"){    possibleAnswers.push(obj);  };};]]></SCR>				<DIS id="problem" name="problem" x="40" y="40" w="350" h="10" type="text"><![CDATA[{expression(templateData.problem[0].step[curPage].prompt, engine)}]]></DIS>				<DIS name="optionalImage" x="problem._x" y="problem._y + problem._height + 20" type="ext" url="{templateData.problem[0].step[curPage].prompt[0].image}"><![CDATA[]]></DIS>				<DIS id="progressBar" name="Progress Bar" x="0" y="0" type="ext" url="FileLocation + "><![CDATA[]]></DIS>				<SCR name="Draw Progress Bar"><![CDATA[nSteps = templateData.problem[0].step.length;progressBarX = 480; progressBarY = 540; progressBarWidth = 150; progressBarHeight = 20; blockWidth = progressBarWidth / nSteps;curPage = rootIcon.getPageIndex() - 1;with (progressBar){  lineStyle(0, 0xaaaaaa);  // Draw the frame ...  drawRect(progressBarX, progressBarY, progressBarWidth, progressBarHeight, 0);  // Draw the blocks  beginFill(0xffaaaa);  for (iBlock = 0; iBlock < curPage + 1; iBlock++){    drawRect(progressBarX + iBlock * blockWidth, progressBarY, blockWidth, progressBarHeight, 0);      };  endFill();};]]></SCR>				<INT name="basicInteraction" perpetual="1">					<RES rs="entryText" name="entryText" type="textEntry" x="410" y="problem._y " w="260" h="100" phrase="match this" scrolling="0" border="1" erase="1" exit="0" />					<RES swf="templatePath + 'flex/button.swf'" rs="btnJudge" name="judge" type="button" x="680" y="40" label="Submit" erase="1" exit="0">						<SCR name="judge"><![CDATA[attempts++;//answerType = ""; //could be known correct, known incorrect or unkown (and incorrect)//loop over answers, checking for the user's inputfor (i = 0; i < answers.length; i++){  // Is the answer correct?   if (answers[i].within == undefined || isNaN(entryText.text)){    answerIsCorrect = answers[i].answer == entryText.text;  } else {    pcError = 100 * ((answers[i].answer - entryText.text) / answers[i].answer);    answerIsCorrect = Math.abs(pcError) <= answers[i].within;  };  // Show no hint if the answer is correct if if still within attempts limit (otherwise show hint) ...  if (answerIsCorrect || attempts < attemptsShowHint){    hint = "";  } else {    hint = templateData.problem[0].step[curPage].hint[0].url;  };//  if (answers[i].answer == entryText.text && answers[i].correct == "true"){  if (answerIsCorrect && answers[i].correct == "true"){    // Known CORRECT answer ...    feedback = answers[i].feedback + " " + answers[i].units;    if (answers[i].answer != entryText.text) { feedback += ' (The exact answer is ' + answers[i].answer + " " + answers[i].units + '.)'; };    btnJudge.setEnabled(false);    if (rootIcon.currentPage < rootIcon.pageCount - 1){      btnNext.setEnabled(true);    };    break; // User's answer has been found among those known - look no further//  } else if (answers[i].answer == entryText.text && answers[i].correct == "false"){  } else if (answerIsCorrect && answers[i].correct == "false"){    // Known INCORRECT answer ...    feedback = answers[i].feedback;    if (attempts < maxAttempts){      // Another attempt is allowed ...      feedback += "<br><br>Try again.";      feedback += "<br><br>" + templateData.problem[0].step[curPage].hint;      feedback += "<br><br>You have " + (maxAttempts - attempts) + " attempts remaining.";    } else {      // No further attempts allowed ...      feedback += "<br><br>The correct answer" + (possibleAnswers.length > 1 ? "s " : " ") + (possibleAnswers.length > 1 ? "are " : "is ");      for (j = 0; j < possibleAnswers.length; j++){        feedback += possibleAnswers[j].answer + " " + possibleAnswers[j].units + " ";      };      // Disable the Submit button ...      btnJudge.setEnabled(false);      // Enable the Next button if there is a next page ...      if (rootIcon.currentPage < rootIcon.pageCount - 1){        btnNext.setEnabled(true);      };    };    break; // User's answer has been found among those known - look no further   } else {    // Unknown INCORRECT answer ...    feedback = "No, that's not right";    if (attempts < maxAttempts){      // Another attempt is allowed ...      feedback += "<br><br>Try again.";      feedback += "<br><br>You have " + (maxAttempts - attempts) + " attempts remaining.";    } else {      // No further attempts allowed ...      feedback += "<br><br>The correct answer" + (possibleAnswers.length > 1 ? "s " : " ") + (possibleAnswers.length > 1 ? "are " : "is ");      for (j = 0; j < possibleAnswers.length; j++){        feedback += possibleAnswers[j].answer + " " + possibleAnswers[j].units + " ";      };      btnJudge.setEnabled(false);      if (rootIcon.currentPage < rootIcon.pageCount - 1){        btnNext.setEnabled(true);      };    };  };};engine[possibleAnswers[0].result] = possibleAnswers[0].answer;]]></SCR>						<DIS id="fb" name="feedback" x="410" y="70" w="350" h="10" type="text"><![CDATA[{feedback}]]></DIS>						<DIS id="hintImg" name="hintImg" x="fb._x" y="fb._y + fb._height + 20" type="ext" url="{hint}"><![CDATA[]]></DIS>						<INT name="fitToSize" perpetual="0">							<RES name="onLoad" type="event" eventName="onLoad" icon="hintImg" erase="1" exit="0">								<SCR name="resize"><![CDATA[// Axial ratio ...p = hintImage._width / hintImage._height;// Available height ...hintImg._height = 600 - 165 - fb._height;// Set width ...hintImg._width = hintImg._height / p; ]]></SCR>							</RES>						</INT>					</RES>					<RES id="summary" swf="templatePath + 'flex/button.swf'" enabled="1" rs="btnSummary" name="Summary" type="button" x="680" y="510" label="Summary" erase="1" exit="0">						<SCR name="Display Summary"><![CDATA[panel_x = 150; panel_y = 150;panel_w = 400; panel_h = 300;text = '';for (i = 0; i < curPage; i++){  text = text + i + ' ';};debug(text);]]></SCR>						<DIS id="summaryPanel" w="panel_w" h="panel_h" x="panel_x" y="panel_y" type="ext" url="templatePath  + 'flex/whitePanel.swf'"><![CDATA[]]></DIS>						<DIS name="[Untitled]" x="panel_x + 10" y="panel_y + 10" w="panel_w - 20" h="panel_h - 40" type="text"><![CDATA[{text}]]></DIS>						<INT name="[Untitled]" perpetual="0">							<RES id="return" swf="templatePath + 'flex/button.swf'" enabled="1" rs="btnNext" name="return" type="button" x="panel_x + panel_w - 90" y="panel_y + panel_h - 30" label="Cancel" erase="1" exit="1">								<SCR name="nextPage"><![CDATA[// Remove all parts of the summary (panel, text, ...) ...summary.removeMovieClip();]]></SCR>							</RES>						</INT>					</RES>					<RES id="moveOn" swf="templatePath + 'flex/button.swf'" enabled="0" rs="btnNext" name="moveOn" type="button" x="680" y="540" label="Next Step" erase="1" exit="0">						<SCR name="nextPage"><![CDATA[rootIcon.nextPage();]]></SCR>					</RES>				</INT>			</PG>			<PG name="feedback">				<SCR name="Read Final Comment from XML"><![CDATA[finalComment = templateData.problem[0].finalScreen;]]></SCR>				<DIS name="feedback" x="40" y="40" w="400" h="10" type="text"><![CDATA[{finalComment}]]></DIS>			</PG>		</IFC>		<BIN name="Deleted Items">			<SCR name="[Untitled]"><![CDATA[debug("Below panel rootIcon.getPageIndex() is " + rootIcon.getPageIndex()); ]]></SCR>			<SCR name="[Untitled]"><![CDATA[//icon.nextSibling.firstChild.duplicate(templateData.problem[0].step.length - 1);icon.parentNode.nextSibling.duplicate(templateData.problem[0].step.length - 1);]]></SCR>			<SCR name="[Untitled]"><![CDATA[debug("ENTRY rootIcon.getPageIndex() is " + rootIcon.getPageIndex()); ]]></SCR>		</BIN>	</LO>