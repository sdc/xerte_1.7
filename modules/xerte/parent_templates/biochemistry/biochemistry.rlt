	<LO description="A template for presenting processes step by step accompanied by an animation" targetFolder="Biochemistry" version="1.0" styleSheet="templatePath + 'common/styles.css'" inputColour="0xFFFFCC" selectableText="1" templateData="FileLocation + 'biochemistry.xml'" name="Animated Process">		<SCR isFunc="1" name="randomVarFnct"><![CDATA[// _______________ FUNCTION ___________________// SETS VALUES OF RANDOM VALUE VARIABLES// THESE HAVE A MIN & MAX VALUE AND CAN BE < OR > ANOTHER VARIABLEgreaterThan = currentVar.more;lessThan = currentVar.less;minValue = expression(currentVar.mini, this);maxValue = expression(currentVar.maxi, this);step = currentVar.step;decimal = currentVar.varDeci;skipCalc = 0;if (lessThan != undefined) {// currentVar < another var  // value of variable it's less than  lessThanNum = expression(lessThan, this);  if (lessThanNum != undefined && lessThanNum != 'NULL') {    if (lessThanNum <= maxValue && lessThanNum > minValue)    {      // reset maxValue if required      maxValue = lessThanNum-1;    }  } else { // var not found    skipCalc = 1;  }}if (greaterThan != undefined) {// currentVar > another var  // value of variable it's greater than  greaterThanNum = expression(greaterThan, this);  if (greaterThanNum != undefined && greaterThanNum != 'NULL') {    if (greaterThanNum >= minValue && greaterThanNum < maxValue)    {      // reset minValue if required      minValue = greaterThanNum+1;    }  } else { // var not found    skipCalc = 1;  }}if (skipCalc == 0) {   // calculates random value between max & min values to correct decimal point / increment  randomNum = (Math.random()*(maxValue-minValue + 1))+minValue;    if (step != undefined) {    // rounds to nearest increment    randomNum = Math.round(randomNum/step)*step;  } else if (decimal != undefined) {    // rounds to correct decimal place        multiplier = 10;        for (j=0; j<decimal; j++)    {      multiplier = multiplier*10;    }    randomNum = Math.round(randomNum*(multiplier/10))/(multiplier/10);  } else {    // rounds to nearest whole number (default if no optional properties added)    randomNum = Math.round(randomNum);  }    // if rounding has taken randomNum out of allowed range  if (randomNum < minValue) {    randomNum = minValue;  } else if (randomNum > maxValue) {    randomNum = maxValue;  }    expression(currentVar.name, this) = randomNum; // sets variable value  valuesCalc++; // adds 1 to no. variables with a calculated value  } else {  // variables required in calculation don't exist or haven't been calculated yet    // sets variable value as NULL until possible to calculate  expression(currentVar.name, this) = 'NULL';}]]></SCR>		<SCR isFunc="1" name="calculateVarFnct"><![CDATA[// _______________ FUNCTION ___________________// SETS VALUES OF CALCULATED VALUE VARIABLES// THESE CAN INCLUDE THE NAMES OF OTHER VARIABLES// VARIABLE NAMES IN EQUATION SHOULD BE SURROUNDED BY { }calcNum = currentVar.varCalc;decimal = currentVar.varDeci;tempCalc = '';tempNo = 0;skipCalc = 0;// replaces variable names in calculation with valuefor (j=0;j<variables.length;j++){  varNo = 0;  counter = 0;  while (varNo < calcNum.length){    // searches calcNum for each variable    varPos = calcNum.indexOf(markUpStart+variables[j]+markUpEnd,varNo);        if (varPos == -1) // none or no more found    {      tempCalc += calcNum.substring(tempNo,calcNum.length);      varNo = calcNum.length;      // will leave while loop now    } else { // variable found      varName = variables[j];      varValue = expression(varName, this);      tempCalc += calcNum.substring(tempNo,varPos) + varValue;      varNo = varPos+variables[j].length;      tempNo = varNo+2;    }  }    calcNum = tempCalc;  tempCalc = "";  tempNo = 0;}// searches calcNum for marked up variable that hasn't been converted to a valuemarkUpPos = calcNum.indexOf(markUpStart,0);nullPos = calcNum.indexOf('NULL',0);if (markUpPos == -1 && nullPos == -1) { // none found    // makes calculation  calcNum = expression(calcNum, this);    // rounds to correct decimal place  multiplier = 10;  for (j=0; j<decimal; j++)  {    multiplier = multiplier*10;  }  tempValue1 = int(calcNum*multiplier)/multiplier;  tempValue2 = int(calcNum*(multiplier/10))/(multiplier/10); // rounded down value  tempValue3 = int((tempValue1-tempValue2)*multiplier); // first decimal place cut off    // should have rounded up so add 1 to last decimal place  if (tempValue3 >=5) {    tempValue2 += 1/(multiplier/10);  }    calcNum = tempValue2;    expression(currentVar.name, this) = calcNum; // sets variable value  valuesCalc++; // adds 1 to no. variables with a calculated value  } else {  // variables required in calculation don't exist or haven't been calculated yet    // sets variable value as NULL until possible to calculate  expression(currentVar.name, this) = 'NULL';}]]></SCR>		<SCR isFunc="1" name="getAlgebraInfo"><![CDATA[// _______________ FUNCTION ___________________// GETS INFO ABOUT VARIABLES & CALLS randomFnct() & calculateFnct() TO SET THEIR VALUESvariRNo = XMLdata.algebra[0].Random.length; // no. random value variablesvariCNo = XMLdata.algebra[0].Calculated.length; // no. calculated value variablesif (firstFnctCall == 1) // 1st time function has been called - create array{variables = new Array(); // var names}if (variRNo != undefined){  for (i=0;i<variRNo;i++)  {    currentVar = XMLdata.algebra[0].Random[i];        if (firstFnctCall == 1) // 1st time function has been called - create variables & array    {      variables.push(currentVar.name);          XMLdata.varName =  currentVar.name; // creates variable    } else {      expression(currentVar.name, this) = 'NULL' // resets variable value before recalculating    }        randomVarFnct(); // calls function to calculate variable value  }} else {  variRNo = 0;}if (variCNo != undefined){  for (i=0;i<variCNo;i++)  {    currentVar = XMLdata.algebra[0].Calculated[i];        if (firstFnctCall == 1) // 1st time function has been called - create variables & array    {      variables.push(currentVar.name);      XMLdata.varName =  currentVar.name; // creates variable    } else {      expression(currentVar.name, this) = 'NULL' // resets variable value before recalculating    }        calculateVarFnct(); // calls function to calculate variable value  }} else {  variCNo = 0;}variNo = variRNo + variCNo; // total no. variables// if some variables couldn't be calculated 1st time round (value = 'NULL') try again// variables may not have calculated if other vars needed in calculation had no value yetstopInfinite = valuesCalc; // to stop it looping forever if some vars are impossible to calculatewhile (variables.length > valuesCalc) {    for (k=0;k<variNo;k++)  {    // it's a var without a proper value    if (expression(variables[k], this) == 'NULL') {      if (k <= variRNo-1) {  // it's a random value variable        currentVar = XMLdata.algebra[0].Random[k];        randomVarFnct();      } else {  // it's a calculated value variable        currentVar = XMLdata.algebra[0].Calculated[k-variRNo];        calculateVarFnct();      }    }  }  if (stopInfinite == valuesCalc) {    // no more variables have been calculated on this loop - stop it trying again    valuesCalc = variables.length;  } else {    stopInfinite = valuesCalc;  }}firstFnctCall = 0;]]></SCR>		<SCR name="makePages"><![CDATA[// INSERTS PAGE OF RIGHT TYPE FOR EACH PAGE IN XMLXMLdata = templateData.learningObject[0];ifc = icon.parentNode.childNodes[4];pageStore = icon.parentNode.getChildByName('pageStore');linkIndex = -1;// creates menu as 1st page if selected (otherwise it's linear navigation)if (XMLdata.navigation == 'Menu'){  pgOffset = 1;  newXML = new XML('<PG model="templatePath + \'models/menu.rlm\'"/>');  newChild = newXML.firstChild;  newChild.attributes.title = 'Main Menu';  newChild.attributes.linkID = extXML.firstChild.childNodes[i].attributes.linkID;      ifc.appendChild(newChild);  } else {  pgOffset = 0;}for (i=0; i<extXML.firstChild.childNodes.length-1; i++){  // build the pages in this project  modName = extXML.firstChild.childNodes[i+1].nodeName;    newXML = new XML('<PG model="templatePath + \'models/' + modName + '.rlm\'"/>');  newChild = newXML.firstChild;  newChild.attributes.title = extXML.firstChild.childNodes[i+1].attributes.name;  newChild.attributes.linkID = extXML.firstChild.childNodes[i+1].attributes.linkID;    if (extXML.firstChild.childNodes[i+1].attributes.linkID == _level0.linkID && extXML.firstChild.childNodes[i+1].attributes.linkID != undefined){    linkIndex = i+1;  }    ifc.appendChild(newChild);}// default text sizeif (XMLdata.textSize != undefined){  STYLES.defaultSize = XMLdata.textSize;  STYLES.inputSize = XMLdata.textSize;}// mark up used for variables in initObj & LaTeX & in calculated vars// these aren't automatically replaced with var values like vars in normal text ismarkUpStart = '{';markUpEnd = '}';// calls function to calculate variable values (for algebra) used in projectvaluesCalc = 0;    // no. variables with value calculatedfirstFnctCall = 1; // as this is the 1st time this function has been calledgetAlgebraInfo();]]></SCR>		<IFC name="interface" title="My Learning Object" visuals="1">			<FW_ENT id="entryFrame" name="background">				<SCR name="setup"><![CDATA[// displays control buttons depending on menu type selectedif (XMLdata.navigation != 'Menu'){  // Linear navigation  icon.nextSibling.firstChild.removeNode();} else {  // Menu navigation  rootIcon.hideControls();  rootIcon.tocBtn._visible = true;  rootIcon.tocBtn._x = 740;}]]></SCR>				<INT name="narrationHandlers" perpetual="0">					<RES name="mainMenu" type="event" eventName="onRelease" icon="rootIcon.tocBtn" erase="1" exit="0">						<SCR name="[Untitled]"><![CDATA[rootIcon.gotoPage(0);]]></SCR>					</RES>					<RES name="showAudio" type="event" eventName="showAudio" icon="rootIcon" erase="1" exit="0">						<SND id="nar" controls="25,0,975" name="narration" type="ext" url="{narration}" play="0" loop="0" wait="0" />						<SCR name="setup"><![CDATA[nar._y = -14;nar._x = 0;nar._yscale =  80;nar._xscale =  80;nar.clear();nar.beginFill(STYLES.titleBarColour,100);nar.drawRect(22,0,130,20);]]></SCR>					</RES>					<RES name="hideNarration" type="event" eventName="onClosePage" icon="rootIcon" erase="1" exit="0">						<SCR name="hideNarration"><![CDATA[if (engine[ytID] != undefined){    engine[ytID].destroy();  delete engine[ytID];}]]></SCR>					</RES>					<RES name="onInit" type="event" eventName="onInit" icon="rootIcon" erase="1" exit="0">						<SCR name="jump"><![CDATA[if (templateData.learningObject[0].displayMode != undefined){  rootIcon.setDisplayMode(templateData.learningObject[0].displayMode);}if (linkIndex != -1){  rootIcon.gotoPage(linkIndex);}]]></SCR>					</RES>				</INT>			</FW_ENT>		</IFC>		<BIN myLongVarName="A variable for tracking the user" name="Deleted Items" />	</LO>